import React, { useState, useEffect } from "react";
import axios from "axios";
import DataTable from "react-data-table-component";
import * as XLSX from "xlsx";

function Payments() {
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(false);

  const fetchData = async () => {
    setLoading(true);
    try {
      const response = await axios.post("https://api.safepay.kg/admin/payment/get-payments", {});
      setData(response.data);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:", error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchData();
  }, []);

  const getTypeLabel = type => {
    switch (type) {
      case 0:
        return "–ü—Ä–∏–µ–º";
      case 1:
        return "–í—ã–ø–ª–∞—Ç–∞";
      case 2:
        return "RECURRENT";
      case 3:
        return "RECURRENT_PAYOUT";
      case 4:
        return "APPLE_PAY";
      case 5:
        return "PHONE_PAYOUT";
      case 6:
        return "ONE_TIME_PAYMENT";
      case 7:
        return "P2P";
      case 8:
        return "SAMSUNG_PAY";
      case 10:
        return "GOOGLE_PAY";
      case 11:
        return "–ü–µ—Ä–µ–≤–æ–¥";
      case 13:
        return "TRANSIT";
      default:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
    }
  };

  const getStatusLabel = status => {
    switch (status) {
      case 0:
        return "–ù–æ–≤—ã–π";
      case 1:
        return "–£—Å–ø–µ—Ö";
      case 2:
        return "–í –ø—Ä–æ—Ü–µ—Å—Å–µ";
      case 6:
        return "–§–µ–π–ª";
      default:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
    }
  };

  const getIsTestLabel = isTest => (isTest ? "–î–∞" : "–ù–µ—Ç");
  const getTrTypeLabel = trType => (trType === 1 ? "–î–≤—É—Å—Ç–∞–¥–∏–π–Ω—ã–π" : "");

  const columns = [
    { name: "–¢–µ—Å—Ç–æ–≤—ã–π", selector: row => getIsTestLabel(row.is_test), sortable: true },
    { name: "ID", selector: row => row.id, sortable: true },
    { name: "–ú–µ—Ä—á–∞–Ω—Ç", selector: row => row.merchant_id, sortable: true },
    { name: "–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞", selector: row => row.reference_id, sortable: true },
    { name: "–¢–∏–ø", selector: row => getTypeLabel(row.type), sortable: true },
    { name: "–°—Ç–∞—Ç—É—Å", selector: row => getStatusLabel(row.status), sortable: true },
    { name: "–ú–∞—Å–∫–∞ –∫–∞—Ä—Ç—ã", selector: row => row.masked_pan, sortable: true },
    { name: "–°—É–º–º–∞", selector: row => row.amount, sortable: true },
    { name: "–í–∞–ª—é—Ç–∞", selector: row => row.currency, sortable: true },
    { name: "–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ", selector: row => row.description, sortable: true },
    { name: "–ö–æ–º–º–µ–Ω—Ç", selector: row => row.comment, sortable: true },
    { name: "–ö–æ–º–∏—Å—Å–∏—è –±–∞–Ω–∫–∞", selector: row => row.bank_commission, sortable: true },
    { name: "–ö–æ–º–∏—Å—Å–∏—è –º–µ—Ä—á–∞–Ω—Ç–∞", selector: row => row.merchant_commission, sortable: true },
    { name: "–°—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞", selector: row => row.refund_amount, sortable: true },
    { name: "–ü—Ä–∏—á–∏–Ω–∞ –í–æ–∑–≤—Ä–∞—Ç–∞", selector: row => row.refund_reason, sortable: true },
    { name: "ID —é–∑–µ—Ä–∞", selector: row => row.user_id, sortable: true },
    { name: "–¢–µ–ª–µ—Ñ–æ–Ω", selector: row => row.user_phone, sortable: true },
    { name: "Email", selector: row => row.user_email, sortable: true },
    { name: "–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è", selector: row => row.finished_at, sortable: true },
    { name: "–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è", selector: row => new Date(row.created_at).toLocaleString(), sortable: true },
    { name: "–≠–∫–≤–∞–π–µ—Ä", selector: row => row.acquirer_id, sortable: true },
    { name: "–≠–º–∏—Ç–µ–Ω—Ç", selector: row => row.bank_id, sortable: true },
    { name: "–ü–æ–ø—ã—Ç–∫–∏", selector: row => row.try, sortable: true },
    { name: "IP", selector: row => row.ip, sortable: true },
    { name: "TR —Ç–∏–ø", selector: row => getTrTypeLabel(row.tr_type), sortable: true },
    { name: "URL –∫–æ–ª–ª–±—ç–∫–∞", selector: row => row.back_url, sortable: true },
    { name: "URL –º–µ—Ä—á–∞–Ω—Ç–∞", selector: row => row.request_url, sortable: true },
    { name: "URL —Ñ–µ–π–ª–∞", selector: row => row.fail_url, sortable: true },
    { name: "–†–†–ù", selector: row => row.rrn, sortable: true }
  ];

  const exportToExcel = () => {
    const worksheet = XLSX.utils.json_to_sheet(data);
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, "Payments");
    XLSX.writeFile(workbook, "payments.xlsx");
  };

  return (
    <div>
      <h1>–î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–µ–π</h1>
      <button onClick={exportToExcel} style={{ marginBottom: "10px", padding: "8px", cursor: "pointer" }}>
        üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
      </button>
      <DataTable
        title="–¢–∞–±–ª–∏—Ü–∞ –ø–ª–∞—Ç–µ–∂–µ–π"
        columns={columns}
        data={data}
        progressPending={loading}
        pagination
        highlightOnHover
        striped
      />
    </div>
  );
}

export default Payments;
