import React, { useState, useEffect } from "react";
import axios from "axios";
import DataTable from "react-data-table-component";
import * as XLSX from "xlsx";

function Payments() {
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(false);
  const [logs, setLogs] = useState(null);
  const [selectedRow, setSelectedRow] = useState(null);

  const fetchData = async () => {
    setLoading(true);
    try {
      const response = await axios.post("https://api.safepay.kg/admin/payment/get-payments", {});
      setData(response.data);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:", error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchData();
  }, []);

  const getTypeLabel = type => {
    switch (type) {
      case 0:
        return "–ü—Ä–∏–µ–º";
      case 1:
        return "–í—ã–ø–ª–∞—Ç–∞";
      case 2:
        return "–†–µ–∫—É—Ä—Ä–µ–Ω—Ç";
      case 3:
        return "–†–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã–π –≤—ã–≤–æ–¥";
      case 4:
        return "APPLE PAY";
      case 5:
        return "–í—ã–≤–æ–¥ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω";
      case 6:
        return "–ü–æ–¥–ø–∏—Å–∫–∞";
      case 7:
        return "P2P";
      case 8:
        return "SAMSUNG PAY";
      case 10:
        return "GOOGLE PAY";
      case 11:
        return "–ü–µ—Ä–µ–≤–æ–¥";
      case 13:
        return "TRANSIT";
      default:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
    }
  };

  const getStatusLabel = status => {
    switch (status) {
      case 0:
        return "–ù–æ–≤—ã–π";
      case 1:
        return "–£—Å–ø–µ—Ö";
      case 2:
        return "–í –ø—Ä–æ—Ü–µ—Å—Å–µ";
      case 6:
        return "–§–µ–π–ª";
      default:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
    }
  };

  const getIsTestLabel = isTest => (isTest ? "–î–∞" : "–ù–µ—Ç");
  const getTrTypeLabel = trType => (trType === 1 ? "–î–≤—É—Å—Ç–∞–¥–∏–π–Ω—ã–π" : "");

  const handleRowClick = async row => {
    setSelectedRow(row.id);
    setLogs(null);
    try {
      const response = await axios.post("https://api.safepay.kg/admin/payment/payments/logs", { id: row.id });
      setLogs(response.data);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤:", error);
      setLogs("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–æ–≥–æ–≤");
    }
  };

  const columns = [
    {
      name: "–¢–µ—Å—Ç–æ–≤—ã–π",
      selector: row => getIsTestLabel(row.is_test),
      sortable: true,
      width: "120px",
      cell: row => <span title={getIsTestLabel(row.is_test)}>{getIsTestLabel(row.is_test)}</span>
    },
    {
      name: "ID",
      selector: row => row.id,
      sortable: true,
      width: "100px",
      cell: row => <span title={row.id}>{row.id}</span>
    },
    {
      name: "–ú–µ—Ä—á–∞–Ω—Ç",
      selector: row => row.merchant_id,
      sortable: true,
      width: "120px",
      cell: row => <span title={row.merchant_id}>{row.merchant_id}</span>
    },
    {
      name: "–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞",
      selector: row => row.reference_id,
      sortable: true,
      width: "150px",
      cell: row => <span title={row.reference_id}>{row.reference_id}</span>
    },
    {
      name: "–¢–∏–ø",
      selector: row => getTypeLabel(row.type),
      sortable: true,
      width: "150px",
      cell: row => <span title={getTypeLabel(row.type)}>{getTypeLabel(row.type)}</span>
    },
    {
      name: "–°—Ç–∞—Ç—É—Å",
      selector: row => getStatusLabel(row.status),
      sortable: true,
      width: "120px",
      cell: row => <span title={getStatusLabel(row.status)}>{getStatusLabel(row.status)}</span>
    },
    {
      name: "–ú–∞—Å–∫–∞ –∫–∞—Ä—Ç—ã",
      selector: row => row.masked_pan,
      sortable: true,
      width: "150px",
      cell: row => <span title={row.masked_pan}>{row.masked_pan}</span>
    },
    {
      name: "–°—É–º–º–∞",
      selector: row => row.amount,
      sortable: true,
      width: "120px",
      cell: row => <span title={row.amount}>{row.amount}</span>
    },
    {
      name: "–í–∞–ª—é—Ç–∞",
      selector: row => row.currency,
      sortable: true,
      width: "100px",
      cell: row => <span title={row.currency}>{row.currency}</span>
    },
    {
      name: "–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ",
      selector: row => row.description,
      sortable: true,
      width: "150px",
      cell: row => <span title={row.description}>{row.description}</span>
    },
    {
      name: "–ö–æ–º–º–µ–Ω—Ç",
      selector: row => row.comment,
      sortable: true,
      width: "150px",
      cell: row => <span title={row.comment}>{row.comment}</span>
    },
    {
      name: "–ö–æ–º–∏—Å—Å–∏—è –±–∞–Ω–∫–∞",
      selector: row => row.bank_commission,
      sortable: true,
      width: "120px",
      cell: row => <span title={row.bank_commission}>{row.bank_commission}</span>
    },
    {
      name: "–ö–æ–º–∏—Å—Å–∏—è –º–µ—Ä—á–∞–Ω—Ç–∞",
      selector: row => row.merchant_commission,
      sortable: true,
      width: "120px",
      cell: row => <span title={row.merchant_commission}>{row.merchant_commission}</span>
    },
    {
      name: "–°—É–º–º–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞",
      selector: row => row.refund_amount,
      sortable: true,
      width: "120px",
      cell: row => <span title={row.refund_amount}>{row.refund_amount}</span>
    },
    {
      name: "–ü—Ä–∏—á–∏–Ω–∞ –í–æ–∑–≤—Ä–∞—Ç–∞",
      selector: row => row.refund_reason,
      sortable: true,
      width: "150px",
      cell: row => <span title={row.refund_reason}>{row.refund_reason}</span>
    },
    {
      name: "ID —é–∑–µ—Ä–∞",
      selector: row => row.user_id,
      sortable: true,
      width: "120px",
      cell: row => <span title={row.user_id}>{row.user_id}</span>
    },
    {
      name: "–¢–µ–ª–µ—Ñ–æ–Ω",
      selector: row => row.user_phone,
      sortable: true,
      width: "150px",
      cell: row => <span title={row.user_phone}>{row.user_phone}</span>
    },
    {
      name: "Email",
      selector: row => row.user_email,
      sortable: true,
      width: "150px",
      cell: row => <span title={row.user_email}>{row.user_email}</span>
    },
    {
      name: "–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è",
      selector: row => row.finished_at,
      sortable: true,
      width: "150px",
      cell: row => <span title={row.finished_at}>{row.finished_at}</span>
    },
    {
      name: "–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è",
      selector: row => new Date(row.created_at).toLocaleString(),
      sortable: true,
      width: "150px",
      cell: row => <span title={row.created_at}>{row.created_at}</span>
    },
    {
      name: "–≠–∫–≤–∞–π–µ—Ä",
      selector: row => row.acquirer_id,
      sortable: true,
      width: "120px",
      cell: row => <span title={row.acquirer_id}>{row.acquirer_id}</span>
    },
    {
      name: "–≠–º–∏—Ç–µ–Ω—Ç",
      selector: row => row.bank_id,
      sortable: true,
      width: "120px",
      cell: row => <span title={row.bank_id}>{row.bank_id}</span>
    },
    {
      name: "–ü–æ–ø—ã—Ç–∫–∏",
      selector: row => row.try,
      sortable: true,
      width: "100px",
      cell: row => <span title={row.try}>{row.try}</span>
    },
    {
      name: "IP",
      selector: row => row.ip,
      sortable: true,
      width: "150px",
      cell: row => <span title={row.ip}>{row.ip}</span>
    },
    {
      name: "TR —Ç–∏–ø",
      selector: row => getTrTypeLabel(row.tr_type),
      sortable: true,
      width: "150px",
      cell: row => <span title={getTrTypeLabel(row.tr_type)}>{getTrTypeLabel(row.tr_type)}</span>
    },
    {
      name: "URL –∫–æ–ª–ª–±—ç–∫–∞",
      selector: row => row.back_url,
      sortable: true,
      width: "200px",
      cell: row => <span title={row.back_url}>{row.back_url}</span>
    },
    {
      name: "URL –º–µ—Ä—á–∞–Ω—Ç–∞",
      selector: row => row.request_url,
      sortable: true,
      width: "200px",
      cell: row => <span title={row.request_url}>{row.request_url}</span>
    },
    {
      name: "URL —Ñ–µ–π–ª–∞",
      selector: row => row.fail_url,
      sortable: true,
      width: "200px",
      cell: row => <span title={row.fail_url}>{row.fail_url}</span>
    },
    {
      name: "–†–†–ù",
      selector: row => row.rrn,
      sortable: true,
      width: "150px",
      cell: row => <span title={row.rrn}>{row.rrn}</span>
    }
  ];

  const exportToExcel = () => {
    const worksheet = XLSX.utils.json_to_sheet(data);
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, "Payments");
    XLSX.writeFile(workbook, "payments.xlsx");
  };

  return (
    <div>
      <h1>–î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–µ–π</h1>
      <button onClick={exportToExcel} style={{ marginBottom: "10px", padding: "8px", cursor: "pointer" }}>
        üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
      </button>
      <DataTable
        title="–¢–∞–±–ª–∏—Ü–∞ –ø–ª–∞—Ç–µ–∂–µ–π"
        columns={columns}
        data={data}
        progressPending={loading}
        pagination
        highlightOnHover
        striped
        onRowClicked={handleRowClick}
        pointerOnHover
      />
      {logs && selectedRow && (
        <div
          style={{
            marginTop: "20px",
            padding: "10px",
            border: "1px solid #ccc",
            borderRadius: "5px",
            background: "#f9f9f9"
          }}>
          <h2>–õ–æ–≥–∏ –ø–ª–∞—Ç–µ–∂–∞ ID: {selectedRow}</h2>
          <pre>{JSON.stringify(logs, null, 2)}</pre>
        </div>
      )}
    </div>
  );
}

export default Payments;
